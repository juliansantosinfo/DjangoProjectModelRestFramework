"""
Django settings for temp project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv


# Load environment variables from .env file
# https://pypi.org/project/python-dotenv/
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# https://docs.djangoproject.com/en/5.1/ref/settings/#secret-key
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# https://docs.djangoproject.com/en/5.1/ref/settings/#debug
DEBUG = True  # Change to False for production

# A list of strings representing the host/domain names that this Django site can serve.
# https://docs.djangoproject.com/en/5.1/ref/settings/#allowed-hosts

ALLOWED_HOSTS = ['*'] #  Be explicit in production! e.g. ['example.com',]

# Cross Site Request Forgery protection
# https://docs.djangoproject.com/en/5.1/ref/csrf/

CSRF_TRUSTED_ORIGINS = [
    'http://*.127.0.0.1', 
    'https://*.127.0.0.1', 
    'http://localhost', 
    'https://localhost', 
] # Be explicit in production!


# django-cors-headers Configuration
# https://pypi.org/project/django-cors-headers/

CORS_ALLOWED_ORIGINS = [] # Use this for specific origins
CORS_ALLOWED_ORIGIN_REGEXES = [] # Use this for regex matching of origins
CORS_ALLOW_ALL_ORIGINS = False #  Avoid this in production! Use specific origins or regexes.


# Application definition
# https://docs.djangoproject.com/en/5.1/ref/settings/#installed-apps

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'django_filters',
    'rest_framework',
    'rest_framework.authtoken', # Token authentication
    'dj_rest_auth', # django-rest-auth
    'dj_rest_auth.registration', # django-rest-auth registration
    'allauth', # django-allauth
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.auth0', # Example social providers
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.microsoft',
    "corsheaders", # django-cors-headers

    # Your apps
    'api',
]

# A list of middleware to use. See Middleware.
# https://docs.djangoproject.com/en/5.1/ref/settings/#middleware

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware", # django-cors-headers middleware
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # For serving static files efficiently
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware", # django-allauth middleware
]

# A string representing the full Python import path to your root URLconf, for example "mydjangoapps.urls".
# https://docs.djangoproject.com/en/5.1/ref/settings/#root-urlconf

ROOT_URLCONF = 'core.urls'

# A list containing the settings for all template engines to be used with Django.
# https://docs.djangoproject.com/en/5.1/ref/settings/#templates

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "web/template/", # Custom template directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',  # Replace with a suitable database for production
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Authentication backends
# https://docs.djangoproject.com/en/5.1/topics/auth/customizing/#authentication-backends

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


# django-allauth Social Account Providers configuration
# https://django-allauth.readthedocs.io/en/latest/providers.html
# Remember to replace placeholders with real client IDs and secrets

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get("GOOGLE_CLIENT_ID"), # Use environment variables
            'secret': os.environ.get("GOOGLE_CLIENT_SECRET"),
            'key': '' # Not always required
        }
    },
    'microsoft': {
        'APP': {
            'client_id':  os.environ.get("MICROSOFT_CLIENT_ID"),
            'secret':  os.environ.get("MICROSOFT_CLIENT_SECRET"),
            'key': ''
        }
    }
}



# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static') # Collect static files here for production
STATICFILES_DIRS = [                   #  Development static files directory
    os.path.join(BASE_DIR, 'web/static'),
]

# Media files (User uploaded files)
# https://docs.djangoproject.com/en/5.1/topics/files/

MEDIA_URL='media/'
MEDIA_ROOT=os.path.join(BASE_DIR,'media')

# Localization
# https://docs.djangoproject.com/en/5.1/topics/i18n/translation/#locale-paths

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'core', 'locale'), 
]

# Email Configuration
# https://docs.djangoproject.com/en/5.1/topics/email/

EMAIL_USE_SSL = eval(os.environ.get("EMAIL_USE_SSL", "False"))  # Use environment variables
EMAIL_USE_TLS = eval(os.environ.get("EMAIL_USE_TLS", "True")) # Better to use TLS than SSL if possible
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", '587')) # Default port for TLS
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' #  Or another suitable backend


# Django-Admin-Interface (Optional)
# https://pypi.org/project/django-admin-interface/

X_FRAME_OPTIONS = 'SAMEORIGIN'


# Django REST Framework Configuration
# https://www.django-rest-framework.org/

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_PERMISSION_CLASSES': [ # Be more restrictive in production as needed.
        'rest_framework.permissions.DjangoModelPermissions' # Requires login by default
    ],
}


